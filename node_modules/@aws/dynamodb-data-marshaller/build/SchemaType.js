"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
/**
 * The enumeration of types supported by this marshaller package.
 */
exports.TypeTags = {
    Any: 'Any',
    Binary: 'Binary',
    Boolean: 'Boolean',
    Collection: 'Collection',
    Custom: 'Custom',
    Date: 'Date',
    Document: 'Document',
    Hash: 'Hash',
    List: 'List',
    Map: 'Map',
    Null: 'Null',
    Number: 'Number',
    Set: 'Set',
    String: 'String',
    Tuple: 'Tuple',
};
function isBaseType(arg) {
    return Boolean(arg) && typeof arg === 'object'
        && typeof arg.type === 'string'
        && arg.type in exports.TypeTags
        && ['string', 'undefined'].indexOf(typeof arg.attributeName) > -1;
}
/**
 * The types of keys a given attribute can represent.
 */
exports.KeyTypes = {
    HASH: 'HASH',
    RANGE: 'RANGE',
};
function isKeyableType(arg) {
    var _a = arg, keyType = _a.keyType, indexKeyConfigurations = _a.indexKeyConfigurations;
    if (!(keyType === undefined || keyType in exports.KeyTypes)) {
        return false;
    }
    var idxKeysType = typeof indexKeyConfigurations;
    if (indexKeyConfigurations && idxKeysType === 'object') {
        try {
            for (var _b = tslib_1.__values(Object.keys(indexKeyConfigurations)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var indexName = _c.value;
                if (!(indexKeyConfigurations[indexName] in exports.KeyTypes)) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    }
    return idxKeysType === 'undefined';
    var e_1, _d;
}
function isSchemaType(arg, alreadyVisited) {
    if (alreadyVisited === void 0) { alreadyVisited = new Set(); }
    if (isBaseType(arg)) {
        if (alreadyVisited.has(arg)) {
            return true;
        }
        alreadyVisited.add(arg);
        switch (arg.type) {
            case 'Binary':
            case 'Date':
            case 'String':
                return isKeyableType(arg);
            case 'Custom':
                return isKeyableType(arg)
                    && typeof arg.marshall === 'function'
                    && typeof arg.unmarshall === 'function'
                    && [
                        void 0,
                        'S',
                        'N',
                        'B',
                    ].indexOf(arg.attributeType) > -1;
            case 'Document':
                return isDocumentType(arg, alreadyVisited);
            case 'List':
            case 'Map':
                return isSchemaType(arg.memberType, alreadyVisited);
            case 'Number':
                return isKeyableType(arg) && ['boolean', 'undefined']
                    .indexOf(typeof arg.versionAttribute) > -1;
            case 'Tuple':
                return isTupleType(arg, alreadyVisited);
            default:
                return true;
        }
    }
    return false;
}
exports.isSchemaType = isSchemaType;
function isDocumentType(arg, alreadyVisited) {
    var _a = arg, valueConstructor = _a.valueConstructor, members = _a.members;
    if (!members || typeof members !== 'object') {
        return false;
    }
    try {
        for (var _b = tslib_1.__values(Object.keys(members)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var key = _c.value;
            if (!isSchemaType(members[key], alreadyVisited)) {
                return false;
            }
        }
    }
    catch (e_2_1) { e_2 = { error: e_2_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_d = _b.return)) _d.call(_b);
        }
        finally { if (e_2) throw e_2.error; }
    }
    return ['function', 'undefined',].indexOf(typeof valueConstructor) > -1;
    var e_2, _d;
}
function isTupleType(arg, alreadyVisited) {
    var members = arg.members;
    if (!Array.isArray(members)) {
        return false;
    }
    try {
        for (var members_1 = tslib_1.__values(members), members_1_1 = members_1.next(); !members_1_1.done; members_1_1 = members_1.next()) {
            var member = members_1_1.value;
            if (!isSchemaType(member, alreadyVisited)) {
                return false;
            }
        }
    }
    catch (e_3_1) { e_3 = { error: e_3_1 }; }
    finally {
        try {
            if (members_1_1 && !members_1_1.done && (_a = members_1.return)) _a.call(members_1);
        }
        finally { if (e_3) throw e_3.error; }
    }
    return true;
    var e_3, _a;
}
//# sourceMappingURL=SchemaType.js.map