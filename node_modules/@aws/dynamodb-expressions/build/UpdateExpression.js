"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var AttributePath_1 = require("./AttributePath");
var FunctionExpression_1 = require("./FunctionExpression");
var MathematicalExpression_1 = require("./MathematicalExpression");
/**
 * An object representing a DynamoDB update expression.
 */
var UpdateExpression = /** @class */ (function () {
    function UpdateExpression() {
        this.toAdd = new Map();
        this.toDelete = new Map();
        this.toRemove = new Set();
        this.toSet = new Map();
    }
    /**
     * Add a directive to the expression's `add` clause.
     */
    UpdateExpression.prototype.add = function (path, value) {
        this.toAdd.set(AttributePath_1.AttributePath.isAttributePath(path) ? path : new AttributePath_1.AttributePath(path), value);
    };
    /**
     * Add a directive to the expression's `delete` clause.
     */
    UpdateExpression.prototype.delete = function (path, value) {
        this.toDelete.set(AttributePath_1.AttributePath.isAttributePath(path) ? path : new AttributePath_1.AttributePath(path), value);
    };
    /**
     * Add a directive to the expression's `remove` clause.
     */
    UpdateExpression.prototype.remove = function (path) {
        this.toRemove.add(AttributePath_1.AttributePath.isAttributePath(path) ? path : new AttributePath_1.AttributePath(path));
    };
    /**
     * Add a directive to the expression's `set` clause.
     */
    UpdateExpression.prototype.set = function (path, value) {
        this.toSet.set(AttributePath_1.AttributePath.isAttributePath(path) ? path : new AttributePath_1.AttributePath(path), value);
    };
    UpdateExpression.prototype.serialize = function (attributes) {
        var clauses = [];
        var phrases = [];
        try {
            for (var _a = tslib_1.__values([
                [this.toAdd, 'ADD'],
                [this.toDelete, 'DELETE'],
            ]), _b = _a.next(); !_b.done; _b = _a.next()) {
                var _c = tslib_1.__read(_b.value, 2), mapping = _c[0], verb = _c[1];
                try {
                    for (var _d = tslib_1.__values(mapping.entries()), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var _f = tslib_1.__read(_e.value, 2), key = _f[0], value = _f[1];
                        phrases.push(attributes.addName(key) + " " + attributes.addValue(value));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_e && !_e.done && (_g = _d.return)) _g.call(_d);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (phrases.length > 0) {
                    clauses.push(verb + " " + phrases.join(', '));
                    phrases.length = 0;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_b && !_b.done && (_h = _a.return)) _h.call(_a);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _j = tslib_1.__values(this.toSet.entries()), _k = _j.next(); !_k.done; _k = _j.next()) {
                var _l = tslib_1.__read(_k.value, 2), key = _l[0], value = _l[1];
                phrases.push(attributes.addName(key) + " = " + (FunctionExpression_1.FunctionExpression.isFunctionExpression(value) || MathematicalExpression_1.MathematicalExpression.isMathematicalExpression(value)
                    ? value.serialize(attributes) : attributes.addValue(value)));
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_k && !_k.done && (_m = _j.return)) _m.call(_j);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (phrases.length > 0) {
            clauses.push("SET " + phrases.join(', '));
            phrases.length = 0;
        }
        try {
            for (var _o = tslib_1.__values(this.toRemove), _p = _o.next(); !_p.done; _p = _o.next()) {
                var keyToRemove = _p.value;
                phrases.push(attributes.addName(keyToRemove));
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_p && !_p.done && (_q = _o.return)) _q.call(_o);
            }
            finally { if (e_4) throw e_4.error; }
        }
        if (phrases.length > 0) {
            clauses.push("REMOVE " + phrases.join(', '));
            phrases.length = 0;
        }
        return clauses.join(' ');
        var e_2, _h, e_1, _g, e_3, _m, e_4, _q;
    };
    return UpdateExpression;
}());
exports.UpdateExpression = UpdateExpression;
//# sourceMappingURL=UpdateExpression.js.map